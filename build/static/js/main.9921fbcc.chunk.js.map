{"version":3,"sources":["components/Button/Button.js","components/Todo/Todo.js","components/TodoForm/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","classesBtn","btnType","className","join","onClick","clicked","children","Todo","todo","completed","completeClicked","removeClicked","style","textDecoration","display","float","TodoForm","placeholder","addTodo","useState","value","setValue","onChange","e","target","onKeyPress","key","App","todos","setTodos","length","color","map","index","text","event","preventDefault","todosClone","completeTodoHandler","splice","removeTodoHandler","addedTodos","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6UAceA,G,YAXA,SAACC,GACZ,IAAMC,EAAa,CAAC,SAAUD,EAAME,SACpC,OACI,4BACIC,UAAWF,EAAWG,KAAK,KAC3BC,QAASL,EAAMM,SACdN,EAAMO,YCQJC,G,MAbF,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,KAAMC,EAAgD,EAAhDA,UAAWC,EAAqC,EAArCA,gBAAiBC,EAAoB,EAApBA,cAE9C,OACI,yBAAKT,UAAU,QACX,uBAAGU,MAAO,CAAEC,eAAgBJ,EAAY,eAAiB,GAAIK,QAAS,iBAAmBN,GACzF,yBAAKI,MAAO,CAAEE,QAAS,eAAgBC,MAAO,UAC1C,kBAAC,EAAD,CAAQd,QAAQ,UAAUI,QAASK,GAAnC,aACA,kBAAC,EAAD,CAAQT,QAAQ,SAASI,QAASM,GAAlC,SCODK,G,MAfE,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,QAAc,EACjBC,mBAAS,IADQ,mBACpCC,EADoC,KAC7BC,EAD6B,KAU3C,OACI,2BAAOnB,UAAU,WAAWe,YAAaA,EAAaG,MAAOA,EAAOE,SAAU,SAAAC,GAAC,OAAIF,EAASE,EAAEC,OAAOJ,QAAQK,WAR3F,SAAAF,GAClB,GAAc,UAAVA,EAAEG,IAAiB,CACnB,IAAKN,EAAO,OACZF,EAAQE,GACRC,EAAS,UCqDNM,MAtDf,WAAgB,IAAD,EACaR,mBAAS,IADtB,mBACNS,EADM,KACCC,EADD,KA6Bb,OACE,yBAAK3B,UAAU,OACb,yCACA,yBAAKA,UAAU,aAEK,IAAjB0B,EAAME,OACL,wBAAIlB,MAAO,CAAEmB,MAAO,UAApB,uBACEH,EAAMI,KAAI,SAACxB,EAAMyB,GAAP,OACV,kBAAC,EAAD,CACEP,IAAKO,EACLA,MAAOA,EACPzB,KAAMA,EAAK0B,KACXzB,UAAWD,EAAKC,UAChBC,gBAAiB,SAACyB,GAAD,OAtCD,SAACZ,EAAGU,GAC9BV,EAAEa,iBACF,IAAIC,EAAU,YAAOT,GACVS,EAAWJ,GACjBxB,WAAY,EAEjBoB,EAASQ,GAgC6BC,CAAoBH,EAAOF,IACvDtB,cAAe,kBA7BD,SAACsB,GACzB,IAAII,EAAU,YAAOT,GACrBS,EAAWE,OAAON,EAAO,GACzBJ,EAASQ,GA0BsBG,CAAkBP,SAG7C,kBAAC,EAAD,CACEhB,YAAY,WACZC,QA5Be,SAACE,GACtB,IAAMZ,EAAO,CACX0B,KAAMd,EACNX,WAAW,GAEPgC,EAAU,sBAAOb,GAAP,CAAcpB,IAC9BqB,EAASY,SCvBOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9921fbcc.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Button.css'\r\n\r\nconst Button = (props) => {\r\n    const classesBtn = ['Button', props.btnType];\r\n    return (\r\n        <button\r\n            className={classesBtn.join(' ')}\r\n            onClick={props.clicked}>\r\n            {props.children}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button\r\n","import React from 'react';\r\nimport Button from '../Button/Button';\r\nimport './Todo.css'\r\n\r\nconst Todo = ({ todo, completed, completeClicked, removeClicked }) => {\r\n\r\n    return (\r\n        <div className='Todo'>\r\n            <p style={{ textDecoration: completed ? 'line-through' : '', display: 'inline-block' }}>{todo}</p>\r\n            <div style={{ display: 'inline-block', float: 'right' }}>\r\n                <Button btnType='Success' clicked={completeClicked} >completed</Button>\r\n                <Button btnType='Danger' clicked={removeClicked} >x</Button>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Todo;","import React, { useState } from 'react';\r\nimport './TodoForm.css';\r\n\r\nconst TodoForm = ({ placeholder, addTodo }) => {\r\n    const [value, setValue] = useState('');\r\n\r\n    const submitHandler = e => {\r\n        if (e.key === 'Enter') {\r\n            if (!value) return;\r\n            addTodo(value)\r\n            setValue('');\r\n        }\r\n    }\r\n    return (\r\n        <input className=\"TodoForm\" placeholder={placeholder} value={value} onChange={e => setValue(e.target.value)} onKeyPress={submitHandler} />\r\n    )\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { useState } from 'react'\nimport './App.css';\nimport Todo from './components/Todo/Todo';\nimport TodoForm from './components/TodoForm/TodoForm';\n\n\n\n\n\nfunction App() {\n  const [todos, setTodos] = useState([])\n\n\n  const completeTodoHandler = (e, index) => {\n    e.preventDefault();\n    let todosClone = [...todos];\n    let todo = todosClone[index];\n    todo.completed = true;\n    // console.log(todosClone);\n    setTodos(todosClone)\n\n  }\n\n  const removeTodoHandler = (index) => {\n    let todosClone = [...todos];\n    todosClone.splice(index, 1);\n    setTodos(todosClone)\n  }\n\n  const addTodoHandler = (value) => {\n    const todo = {\n      text: value,\n      completed: false\n    }\n    const addedTodos = [...todos, todo]\n    setTodos(addedTodos);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>TODO LIST</h1>\n      <div className=\"Todo-List\">\n\n        {todos.length === 0 ?\n          <h1 style={{ color: 'black' }}>Start Day with TODO</h1>\n          : todos.map((todo, index) => (\n            <Todo\n              key={index}\n              index={index}\n              todo={todo.text}\n              completed={todo.completed}\n              completeClicked={(event) => completeTodoHandler(event, index)}\n              removeClicked={() => removeTodoHandler(index)} />\n          )\n          )}\n        <TodoForm\n          placeholder='Add Task'\n          addTodo={addTodoHandler} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Index.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}